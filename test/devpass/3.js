function solution(pixels) {
  //* 1) index를 해당하는 숫자로 가지는 코드리스트 선언
  const NUMBER = [
    "111101101101111",
    "110010010010111",
    "111001111100111",
    "111001111001111",
    "101101111001001",
    "111100111001111",
    "111100111101111",
    "111101001001001",
    "111101111101111",
    "111101111001111",
  ];

  // pixels에 존재하는 숫자의 개수를 구하기
  let n = pixels[0].length / 3;

  //* 2) 존재하는 숫자만큼 순회하며, 5열에 나누어져 있는 코드 정보를 수집하기
  let nums = Array.from({ length: n }, () => Array(5).fill([]));
  for (let i = 0; i < n; i++) {
    let startIdx = i * 3;

    for (let c = 0; c <= 4; c++) {
      const pixel = pixels[c].slice(startIdx, startIdx + 3);
      nums[i][c] = pixel;
    }
  }
  //* 3) 각 숫자에 대한 코드 파싱하여, 숫자구하기
  const codeNumList = nums.map((num) => num.join(""));
  return codeNumList
    .map((el) => {
      let num = NUMBER.indexOf(String(el));
      return num;
    })
    .join("");
}

console.log(
  solution([
    "111111111111111111111111110111111111",
    "001101001101101100101101010101001100",
    "111101111101101111101111010111111111",
    "100101100101101101101001010101001001",
    "111111111111111111111111111111111111",
  ])
);
// 202006091835
console.log(
  solution([
    "110111101111111111110111",
    "010101101100101101010100",
    "010111111111101111010111",
    "010001001001101101010001",
    "111111001111111111111111",
  ])
);
// "19450815"
console.log(
  solution([
    "111110111101111101111101",
    "100010101101001101100101",
    "111010111111111111111111",
    "001010101001100001001001",
    "111111111001111001111001",
  ])
);
// "51842454"
