//* 난이도 및 풀이 시간
// 실제 난이도: lv3 체감 난이도: lv2
//* 문제이해
// https://programmers.co.kr/learn/courses/30/lessons/42579
// 장르 배열과 각곡의 plays 배열이 주어질 때,  한 장르당 최대 2곡의 노래를 선택하고, 이를 우선순위에 맞게 리턴하는 문제
// 제한 사항
// 1. 장르의 총 재생횟수 합
// 2. 해당 장르에서 상위 2개의 노래 선택 (1개일 경우 1개만)

//* 아이디어
// data를 형식에 맞게 파싱한 후, sort처리, 뽑아주기만 잘 하면 된다.
/*
 [
    [ 'classic' , [[0,500], [2,150], [3,800]] ], 
    [ 'pop' , [[0,500], [2,150], [3,800]] ]
  ]
 */
//* 풀이방법(순서도, 절차적프로그래밍)
// 1. data 파싱하기
// 2. 장르별 합 구하여, 합이 높은 순으로 sort
// 3. data를 순회하며, 2곡(or1곡) 뽑아 album에 넣기
//* 시간복잡도
// O()
//* 복습필요여부
// No

function solution(genres, plays) {
  /*
  Todo 1. data 파싱하기
  [
      [ classic , [[0,500], [2,150], [3,800]]]
      [ pop , [[1,1500], [4,1700] ]
  ] or 
  {
    classic: [[0,500], [2,150], [3,800]]],
    pop :[[1,1500], [4,1700] ]
  }
  Todo 2. 장르별 합을 구해 우선순위 구하기
      data[i][1]를 순회하며 합구한 것으로 sort 하기
  [
    [ pop, [...]],
    [ classic, [...]]
  ] 
  Todo 3. 장르내에서 2개씩 뽑기
     data 반복하며 뽑기
  */

  let album = [];
  let data = {};
  /* {
    classic: [[0,500], [2,150], [3,800]]],
    pop :[[1,1500], [4,1700] ]
  } */
  genres.forEach((g, idx) => {
    if (!data[g]) {
      data[g] = [];
    }
    data[g].push([idx, plays[idx]]);
  });

  // 1-2)data 형식 배열로 바꾸기
  // 1-3) 노래길이 순으로 내림차순 정렬
  data = Object.entries(data);
  data.forEach(([key, playList]) => playList.sort((a, b) => b[1] - a[1]));

  // 2. 장르별 합을 기준으로 내림차순 정렬
  data.sort((a, b) => {
    return (
      b[1].reduce((acc, cur) => acc + cur[1], 0) -
      a[1].reduce((acc, cur) => acc + cur[1], 0)
    );
  });
  // 3. 파싱된 data에서 2개의 곡(1개일 경우 1개의 곡) 뽑아 album에 넣기
  data.forEach((g, idx) => {
    if (g[1].length === 1) {
      album.push(g[1][0][0]);
    } else {
      album.push(g[1][0][0]);
      album.push(g[1][1][0]);
    }
  });
  return album;
}

console.log(
  solution(
    ["classic", "pop", "classic", "classic", "pop"],
    [500, 600, 150, 800, 2500]
  )
); // [4, 1, 3, 0]

/*
문제 설명
스트리밍 사이트에서 장르 별로 가장 많이 재생된 노래를 두 개씩 모아 베스트 앨범을 출시하려 합니다. 노래는 고유 번호로 구분하며, 노래를 수록하는 기준은 다음과 같습니다.

속한 노래가 많이 재생된 장르를 먼저 수록합니다.
장르 내에서 많이 재생된 노래를 먼저 수록합니다.
장르 내에서 재생 횟수가 같은 노래 중에서는 고유 번호가 낮은 노래를 먼저 수록합니다.
노래의 장르를 나타내는 문자열 배열 genres와 노래별 재생 횟수를 나타내는 정수 배열 plays가 주어질 때, 베스트 앨범에 들어갈 노래의 고유 번호를 순서대로 return 하도록 solution 함수를 완성하세요.

제한사항
genres[i]는 고유번호가 i인 노래의 장르입니다.
plays[i]는 고유번호가 i인 노래가 재생된 횟수입니다.
genres와 plays의 길이는 같으며, 이는 1 이상 10,000 이하입니다.
장르 종류는 100개 미만입니다.
장르에 속한 곡이 하나라면, 하나의 곡만 선택합니다.
모든 장르는 재생된 횟수가 다릅니다.
입출력 예
genres	plays	return
["classic", "pop", "classic", "classic", "pop"]	[500, 600, 150, 800, 2500]	[4, 1, 3, 0]
입출력 예 설명
classic 장르는 1,450회 재생되었으며, classic 노래는 다음과 같습니다.

고유 번호 3: 800회 재생
고유 번호 0: 500회 재생
고유 번호 2: 150회 재생
pop 장르는 3,100회 재생되었으며, pop 노래는 다음과 같습니다.

고유 번호 4: 2,500회 재생
고유 번호 1: 600회 재생
따라서 pop 장르의 [4, 1]번 노래를 먼저, classic 장르의 [3, 0]번 노래를 그다음에 수록합니다.

※ 공지 - 2019년 2월 28일 테스트케이스가 추가되었습니다.
*/
